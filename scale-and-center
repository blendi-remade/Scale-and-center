from PIL import Image

class ScaleAndCenterNode:
    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "image": ("IMAGE",), 
                "x": ("INT", {"default": 0, "min": 0, "max": 1024, "step": 1}),
                "y": ("INT", {"default": 0, "min": 0, "max": 1024, "step": 1}),
                "width": ("INT", {"default": 512, "min": 1, "max": 1024, "step": 1}),
                "height": ("INT", {"default": 512, "min": 1, "max": 1024, "step": 1}),
            }
        }

    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "scale_and_center"

    CATEGORY = "image/process"

    def scale_and_center(self, image, x, y, width, height):
        # Calculate the scaling factor
        max_dim = max(width, height)
        scale_factor = 512 / max_dim

        # Scale the image
        new_width = int(width * scale_factor)
        new_height = int(height * scale_factor)
        scaled_image = image.resize((new_width, new_height), Image.ANTIALIAS)

        # Create a new 1024x1024 white canvas
        canvas = Image.new('RGB', (1024, 1024), (255, 255, 255))

        # Calculate the position to center the scaled image on the canvas
        new_x = (1024 - new_width) // 2
        new_y = (1024 - new_height) // 2

        # Paste the scaled image onto the canvas
        canvas.paste(scaled_image, (new_x, new_y))

        return (canvas,)

NODE_CLASS_MAPPINGS = {
    "ScaleAndCenterNode": ScaleAndCenterNode,
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "ScaleAndCenterNode": "Scale and Center Node"
}
